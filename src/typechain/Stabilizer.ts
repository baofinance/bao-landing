/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StabilizerInterface extends utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "buyFee()": FunctionFragment;
    "governance()": FunctionFragment;
    "operator()": FunctionFragment;
    "removeStrat()": FunctionFragment;
    "rescue(address)": FunctionFragment;
    "reserve()": FunctionFragment;
    "sell(uint256)": FunctionFragment;
    "sellFee()": FunctionFragment;
    "setBuyFee(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setSellFee(uint256)": FunctionFragment;
    "setStrat(address)": FunctionFragment;
    "strat()": FunctionFragment;
    "supply()": FunctionFragment;
    "supplyCap()": FunctionFragment;
    "synth()": FunctionFragment;
    "takeProfit()": FunctionFragment;
    "getTotalReserves()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DENOMINATOR"
      | "FEE_DENOMINATOR()"
      | "MAX_FEE"
      | "MAX_FEE()"
      | "buy"
      | "buy(uint256)"
      | "buyFee"
      | "buyFee()"
      | "governance"
      | "governance()"
      | "operator"
      | "operator()"
      | "removeStrat"
      | "removeStrat()"
      | "rescue"
      | "rescue(address)"
      | "reserve"
      | "reserve()"
      | "sell"
      | "sell(uint256)"
      | "sellFee"
      | "sellFee()"
      | "setBuyFee"
      | "setBuyFee(uint256)"
      | "setCap"
      | "setCap(uint256)"
      | "setGovernance"
      | "setGovernance(address)"
      | "setOperator"
      | "setOperator(address)"
      | "setSellFee"
      | "setSellFee(uint256)"
      | "setStrat"
      | "setStrat(address)"
      | "strat"
      | "strat()"
      | "supply"
      | "supply()"
      | "supplyCap"
      | "supplyCap()"
      | "synth"
      | "synth()"
      | "takeProfit"
      | "takeProfit()"
      | "getTotalReserves"
      | "getTotalReserves()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_FEE()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "buyFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyFee()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrat()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserve()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sell(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellFee()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBuyFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrat(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "strat", values?: undefined): string;
  encodeFunctionData(functionFragment: "strat()", values?: undefined): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(functionFragment: "supply()", values?: undefined): string;
  encodeFunctionData(functionFragment: "supplyCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyCap()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "synth", values?: undefined): string;
  encodeFunctionData(functionFragment: "synth()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeProfit()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReserves()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buy(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFee()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrat()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescue(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sell(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFee()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCap(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSellFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSellFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStrat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrat(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strat()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyCap()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synth()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeProfit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeProfit()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReserves()",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256,uint256)": EventFragment;
    "Sell(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Buy(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Sell(address,uint256,uint256)"
  ): EventFragment;
}

export interface BuyEventObject {
  user: string;
  purchased: BigNumber;
  spent: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface SellEventObject {
  user: string;
  sold: BigNumber;
  received: BigNumber;
}
export type SellEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SellEventObject
>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export interface Stabilizer extends BaseContract {
  contractName: "Stabilizer";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StabilizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "buyFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    "operator()"(overrides?: CallOverrides): Promise<[string]>;

    removeStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeStrat()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescue(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rescue(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    "reserve()"(overrides?: CallOverrides): Promise<[string]>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sell(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sellFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuyFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBuyFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setOperator(address)"(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSellFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setSellFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrat(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setStrat(address)"(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strat(overrides?: CallOverrides): Promise<[string]>;

    "strat()"(overrides?: CallOverrides): Promise<[string]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supplyCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    synth(overrides?: CallOverrides): Promise<[string]>;

    "synth()"(overrides?: CallOverrides): Promise<[string]>;

    takeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "takeProfit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyFee(overrides?: CallOverrides): Promise<BigNumber>;

  "buyFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  removeStrat(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeStrat()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescue(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rescue(address)"(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  "reserve()"(overrides?: CallOverrides): Promise<string>;

  sell(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sell(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellFee(overrides?: CallOverrides): Promise<BigNumber>;

  "sellFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBuyFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBuyFee(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCap(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    gov_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    gov_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    operator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setOperator(address)"(
    operator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSellFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setSellFee(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrat(
    newStrat: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setStrat(address)"(
    newStrat: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strat(overrides?: CallOverrides): Promise<string>;

  "strat()"(overrides?: CallOverrides): Promise<string>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

  "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  synth(overrides?: CallOverrides): Promise<string>;

  "synth()"(overrides?: CallOverrides): Promise<string>;

  takeProfit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "takeProfit()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyFee(overrides?: CallOverrides): Promise<BigNumber>;

    "buyFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    removeStrat(overrides?: CallOverrides): Promise<void>;

    "removeStrat()"(overrides?: CallOverrides): Promise<void>;

    rescue(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    "reserve()"(overrides?: CallOverrides): Promise<string>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCap(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      gov_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      gov_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(address)"(
      operator_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSellFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrat(
      newStrat: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrat(address)"(
      newStrat: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    strat(overrides?: CallOverrides): Promise<string>;

    "strat()"(overrides?: CallOverrides): Promise<string>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    synth(overrides?: CallOverrides): Promise<string>;

    "synth()"(overrides?: CallOverrides): Promise<string>;

    takeProfit(overrides?: CallOverrides): Promise<void>;

    "takeProfit()"(overrides?: CallOverrides): Promise<void>;

    getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Buy(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      purchased?: null,
      spent?: null
    ): BuyEventFilter;
    Buy(
      user?: PromiseOrValue<string> | null,
      purchased?: null,
      spent?: null
    ): BuyEventFilter;

    "Sell(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      sold?: null,
      received?: null
    ): SellEventFilter;
    Sell(
      user?: PromiseOrValue<string> | null,
      sold?: null,
      received?: null
    ): SellEventFilter;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "buy(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyFee(overrides?: CallOverrides): Promise<BigNumber>;

    "buyFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeStrat()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescue(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rescue(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sell(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBuyFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCap(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setOperator(address)"(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSellFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setSellFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrat(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setStrat(address)"(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strat(overrides?: CallOverrides): Promise<BigNumber>;

    "strat()"(overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    "supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    synth(overrides?: CallOverrides): Promise<BigNumber>;

    "synth()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "takeProfit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeStrat()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rescue(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sell(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBuyFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      gov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setOperator(address)"(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSellFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setSellFee(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrat(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setStrat(address)"(
      newStrat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supplyCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "synth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "takeProfit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
