/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace UniSwapRecipe {
  export type BestPriceStruct = {
    price: PromiseOrValue<BigNumberish>;
    ammIndex: PromiseOrValue<BigNumberish>;
  };

  export type BestPriceStructOutput = [BigNumber, BigNumber] & {
    price: BigNumber;
    ammIndex: BigNumber;
  };
}

export interface BEthRecipeInterface extends utils.Interface {
  functions: {
    "bake(address,address,uint256,uint256)": FunctionFragment;
    "basketRegistry()": FunctionFragment;
    "customHops(address)": FunctionFragment;
    "dexSwap(address,address,uint256,uint256)": FunctionFragment;
    "getBestPrice(address,address,uint256)": FunctionFragment;
    "getPrice(address,address,uint256)": FunctionFragment;
    "lendingRegistry()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saveEth(address,uint256)": FunctionFragment;
    "saveToken(address,address,uint256)": FunctionFragment;
    "setCustomHop(address,address)": FunctionFragment;
    "setUniPoolMapping(address,uint16)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniRouter()": FunctionFragment;
    "uniV2Router()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bake"
      | "bake(address,address,uint256,uint256)"
      | "basketRegistry"
      | "basketRegistry()"
      | "customHops"
      | "customHops(address)"
      | "dexSwap"
      | "dexSwap(address,address,uint256,uint256)"
      | "getBestPrice"
      | "getBestPrice(address,address,uint256)"
      | "getPrice"
      | "getPrice(address,address,uint256)"
      | "lendingRegistry"
      | "lendingRegistry()"
      | "oracle"
      | "oracle()"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "saveEth"
      | "saveEth(address,uint256)"
      | "saveToken"
      | "saveToken(address,address,uint256)"
      | "setCustomHop"
      | "setCustomHop(address,address)"
      | "setUniPoolMapping"
      | "setUniPoolMapping(address,uint16)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "uniRouter"
      | "uniRouter()"
      | "uniV2Router"
      | "uniV2Router()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bake(address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "basketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basketRegistry()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customHops",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "customHops(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dexSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dexSwap(address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPrice(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingRegistry()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveEth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveEth(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "saveToken(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomHop",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomHop(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniPoolMapping",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniPoolMapping(address,uint16)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniRouter()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2Router()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bake(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basketRegistry()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "customHops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customHops(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexSwap(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPrice(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrice(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingRegistry()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saveEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveEth(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saveToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveToken(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomHop(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniPoolMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniPoolMapping(address,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniRouter()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Router()",
    data: BytesLike
  ): Result;

  events: {
    "HopUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HopUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "HopUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface HopUpdatedEventObject {
  _token: string;
  _hop: string;
}
export type HopUpdatedEvent = TypedEvent<
  [string, string],
  HopUpdatedEventObject
>;

export type HopUpdatedEventFilter = TypedEventFilter<HopUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BEthRecipe extends BaseContract {
  contractName: "BEthRecipe";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BEthRecipeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bake(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bake(address,address,uint256,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    basketRegistry(overrides?: CallOverrides): Promise<[string]>;

    "basketRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    customHops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "customHops(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dexSwap(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dexSwap(address,address,uint256,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBestPrice(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getBestPrice(address,address,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPrice(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getPrice(address,address,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lendingRegistry(overrides?: CallOverrides): Promise<[string]>;

    "lendingRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveEth(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "saveEth(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "saveToken(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCustomHop(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCustomHop(address,address)"(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniPoolMapping(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUniPoolMapping(address,uint16)"(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<[string]>;

    "uniRouter()"(overrides?: CallOverrides): Promise<[string]>;

    uniV2Router(overrides?: CallOverrides): Promise<[string]>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<[string]>;
  };

  bake(
    _inputToken: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _maxInput: PromiseOrValue<BigNumberish>,
    _mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bake(address,address,uint256,uint256)"(
    _inputToken: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _maxInput: PromiseOrValue<BigNumberish>,
    _mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  basketRegistry(overrides?: CallOverrides): Promise<string>;

  "basketRegistry()"(overrides?: CallOverrides): Promise<string>;

  customHops(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "customHops(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  dexSwap(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountOut: PromiseOrValue<BigNumberish>,
    _ammIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dexSwap(address,address,uint256,uint256)"(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountOut: PromiseOrValue<BigNumberish>,
    _ammIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBestPrice(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getBestPrice(address,address,uint256)"(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPrice(
    _inputToken: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getPrice(address,address,uint256)"(
    _inputToken: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lendingRegistry(overrides?: CallOverrides): Promise<string>;

  "lendingRegistry()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveEth(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "saveEth(address,uint256)"(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveToken(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "saveToken(address,address,uint256)"(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCustomHop(
    _token: PromiseOrValue<string>,
    _hop: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCustomHop(address,address)"(
    _token: PromiseOrValue<string>,
    _hop: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniPoolMapping(
    _outputAsset: PromiseOrValue<string>,
    _Fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUniPoolMapping(address,uint16)"(
    _outputAsset: PromiseOrValue<string>,
    _Fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniRouter(overrides?: CallOverrides): Promise<string>;

  "uniRouter()"(overrides?: CallOverrides): Promise<string>;

  uniV2Router(overrides?: CallOverrides): Promise<string>;

  "uniV2Router()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bake(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        inputAmountUsed: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    "bake(address,address,uint256,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        inputAmountUsed: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    basketRegistry(overrides?: CallOverrides): Promise<string>;

    "basketRegistry()"(overrides?: CallOverrides): Promise<string>;

    customHops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "customHops(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    dexSwap(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dexSwap(address,address,uint256,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBestPrice(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<UniSwapRecipe.BestPriceStructOutput>;

    "getBestPrice(address,address,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<UniSwapRecipe.BestPriceStructOutput>;

    getPrice(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address,address,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingRegistry(overrides?: CallOverrides): Promise<string>;

    "lendingRegistry()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    saveEth(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "saveEth(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    saveToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "saveToken(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomHop(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCustomHop(address,address)"(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniPoolMapping(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUniPoolMapping(address,uint16)"(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniRouter(overrides?: CallOverrides): Promise<string>;

    "uniRouter()"(overrides?: CallOverrides): Promise<string>;

    uniV2Router(overrides?: CallOverrides): Promise<string>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "HopUpdated(address,address)"(
      _token?: PromiseOrValue<string> | null,
      _hop?: PromiseOrValue<string> | null
    ): HopUpdatedEventFilter;
    HopUpdated(
      _token?: PromiseOrValue<string> | null,
      _hop?: PromiseOrValue<string> | null
    ): HopUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bake(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bake(address,address,uint256,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    basketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "basketRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    customHops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "customHops(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dexSwap(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dexSwap(address,address,uint256,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBestPrice(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getBestPrice(address,address,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPrice(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getPrice(address,address,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lendingRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveEth(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "saveEth(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "saveToken(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCustomHop(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCustomHop(address,address)"(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniPoolMapping(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUniPoolMapping(address,uint16)"(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "uniRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bake(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bake(address,address,uint256,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _maxInput: PromiseOrValue<BigNumberish>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    basketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "basketRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customHops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "customHops(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dexSwap(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dexSwap(address,address,uint256,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      _ammIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBestPrice(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getBestPrice(address,address,uint256)"(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPrice(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getPrice(address,address,uint256)"(
      _inputToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lendingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendingRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveEth(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "saveEth(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "saveToken(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCustomHop(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCustomHop(address,address)"(
      _token: PromiseOrValue<string>,
      _hop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniPoolMapping(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUniPoolMapping(address,uint16)"(
      _outputAsset: PromiseOrValue<string>,
      _Fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
